package uk.ac.ebi.interpro.scan.management.model.implementations.stepInstanceCreation.nucleotide;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.springframework.beans.factory.annotation.Required;
import uk.ac.ebi.interpro.scan.management.model.StepInstance;
import uk.ac.ebi.interpro.scan.management.model.implementations.RunBinaryStep;
import uk.ac.ebi.interpro.scan.util.Utilities;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * @author Phil Jones
 * @author Gift Nuka
 *         Date: 21/06/11
 *         Time: 12:01
 */
public class RunTranslateToProteinsStep extends RunBinaryStep {

    private static final Logger LOGGER = LogManager.getLogger(RunTranslateToProteinsStep.class.getName());

    private String fullPathToTranslateBinary;

    /**
     * The path / file name for the OUTPUT FILE (protein sequence fasta file).
     */
    private String fastaFilePath;

    public static final String SEQUENCE_FILE_PATH_KEY = "nucleic.seq.file.path";

    public static final String MIN_NUCLEOTIDE_SIZE = "minsize";

    public void setFullPathToTranslateBinary(String fullPathToTranslateBinary) {
        this.fullPathToTranslateBinary = fullPathToTranslateBinary;
    }

    /**
     * Note this is the path template for the OUTPUT FILE - e.g. the protein sequence
     * file generated by GetOrf.
     *
     * @param fastaFilePath being the name of the protein sequence output file.
     */
    @Required
    public void setFastaFilePath(String fastaFilePath) {
        this.fastaFilePath = fastaFilePath;
    }

    @Override
    protected List<String> createCommand(StepInstance stepInstance, String temporaryFileDirectory) {
        final Map<String, String> parameters = stepInstance.getParameters();
        final String nucleicAcidSeqFilePath = parameters.get(SEQUENCE_FILE_PATH_KEY);
        final List<String> command = new ArrayList<String>();
        command.add(fullPathToTranslateBinary);
        command.add(nucleicAcidSeqFilePath);
        Utilities.verboseLog(1100, "RunTranslateToProteinsStep: " + getCommandBuilder(command));
        return command;
    }
}
