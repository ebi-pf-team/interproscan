<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

    <import resource="classpath:/spring/persistence/persistence-config-context.xml"/>

    <!-- ######################## JOB: PANTHER ############################  -->

    <bean id="jobPanther-7.2" class="uk.ac.ebi.interpro.scan.management.model.Job">
        <property name="description"
                  value="The PANTHER (Protein ANalysis THrough Evolutionary Relationships) Classification System is a unique resource that classifies genes by their functions, using published scientific experimental evidence and evolutionary relationships to predict function even in the absence of direct experimental evidence."/>
        <property name="analysis" value="true"/>
        <property name="libraryRelease" ref="signatureLibraryReleasePanther-7.2"/>
        <property name="nonEmptyPaths">
            <list value-type="java.lang.String">
                <value>${panther.models.dir.7.2}</value>
                <value>${binary.panther.perl.lib.dir}</value>
                <value>${binary.panther.path}</value>
                <value>${binary.blastall.2.2.6.path}</value>
                <value>${binary.hmmer2.hmmsearch.path}</value>
                <value>${panther.temporary.file.directory}</value>
            </list>
        </property>
        <property name="mandatoryParameters">
            <map key-type="java.lang.String" value-type="java.lang.String">
                <entry key="perl.command" value-ref="perlCommand"/>
                <entry key="binary.panther.perl.lib.dir" value-ref="perlLibrary"/>
                <entry key="binary.panther.path" value-ref="scriptPath"/>
                <entry key="panther.models.dir.7.2" value-ref="modelDirectory"/>
                <entry key="binary.blastall.2.2.6.path" value-ref="blastPath"/>
                <entry key="binary.hmmer2.hmmsearch.path" value-ref="hmmerPath"/>
                <entry key="panther.temporary.file.directory" value-ref="perlScriptTempDir"/>
            </map>
        </property>
    </bean>

    <bean id="perlCommand" class="java.lang.String">
        <constructor-arg value="${perl.command}"/>
    </bean>
    <!--Path to a Perl library directory (in this case a Perl library provided by Panther which is necessary to run the script)-->
    <bean id="perlLibrary" class="java.lang.String">
        <constructor-arg value="${binary.panther.perl.lib.dir}"/>
    </bean>
    <!--Panther Perl script-->
    <bean id="scriptPath" class="java.lang.String">
        <constructor-arg value="${binary.panther.path}"/>
    </bean>
    <!--Add Panther models-->
    <bean id="modelDirectory" class="java.lang.String">
        <constructor-arg value="${panther.models.dir.7.2}"/>
    </bean>
    <!--Add path to (B)last binary-->
    <bean id="blastPath" class="java.lang.String">
        <constructor-arg value="${binary.blastall.2.2.6.path}"/>
    </bean>
    <!--Add path to (H)mmsearch binary-->
    <bean id="hmmerPath" class="java.lang.String">
        <constructor-arg value="${binary.hmmer2.hmmsearch.path}"/>
    </bean>

    <bean id="perlScriptTempDir" class="java.lang.String">
        <constructor-arg value="${panther.temporary.file.directory}"/>
    </bean>

    <bean id="abstractPantherStep" abstract="true" class="uk.ac.ebi.interpro.scan.management.model.Step">
        <property name="job" ref="jobPanther-7.2"/>
        <property name="maxProteins" value="${analysis.max.sequence.count.PANTHER}"/>
        <property name="createStepInstancesForNewProteins" value="true"/>
        <property name="retries" value="0"/>
        <property name="nfsDelayMilliseconds" value="${nfs.delay.milliseconds}"/>
    </bean>

    <!-- STEP 1: Write FASTA file -->
    <bean id="stepPantherWriteFastaFile"
          class="uk.ac.ebi.interpro.scan.management.model.implementations.WriteFastaFileStep"
          parent="abstractPantherStep">
        <!-- This step has no dependencies, so will be scheduled first for its associated job. -->
        <property name="stepDescription" value="Create FASTA file."/>
        <property name="fastaFileNameTemplate" ref="fastaFileNameTemplate"/>
        <!--<property name="serialGroup"        value="WRITE_FASTA_FILE"/>-->
        <property name="proteinDAO" ref="proteinDAO"/>
    </bean>

    <!-- STEP 2: Run binary -->
    <bean id="stepPantherRunBinary"
          class="uk.ac.ebi.interpro.scan.management.model.implementations.panther.PantherBinaryStep"
          parent="abstractPantherStep">
        <!--
        perl -I data/panther/7.2/lib bin/panther/7.2/pantherScore.pl
        -l path to the Panther model directory
        -D I
        -E 1e-3
        -B bin/blast/2.2.6/blastall
        -H bin/hmmer/hmmer2/2.3.2/hmmsearch
        -T temp/
        -n
        -i UPI000000004D.fasta
        -->
        <property name="dependsUpon" ref="stepPantherWriteFastaFile"/>
        <property name="stepDescription" value="Run PANTHER binary for selected proteins"/>
        <!--Add Perl command-->
        <property name="perlCommand" ref="perlCommand"/>
        <!--Path to a Perl library directory (in this case a Perl library provided by Panther which is necessary to run the script)-->
        <property name="perlLibrary" ref="perlLibrary"/>
        <!--Panther Perl script-->
        <property name="scriptPath" ref="scriptPath"/>
        <!--Add Panther models-->
        <property name="modelDirectory" ref="modelDirectory"/>
        <!--Add path to (B)last binary-->
        <property name="blastPath" ref="blastPath"/>
        <!--Add path to (H)mmsearch binary-->
        <property name="hmmerPath" ref="hmmerPath"/>
        <!--Add additional arguments/parameter-->
        <!--<property name="binarySwitches" value="-D I -E 1e-3 -T temp/ -n -o stdout.txt -e stderr.txt"/>-->
        <property name="binarySwitches" value="${panther.binary.switches} ${panther.binary.cpu.switch}"/>
        <property name="perlScriptTempDir" ref="perlScriptTempDir"/>
        <property name="outputFileNameTemplate" ref="rawAnalaysisOutputFileTemplate"/>
        <property name="fastaFileNameTemplate" ref="fastaFileNameTemplate"/>
        <property name="retries" value="3"/>
        <property name="requiresDatabaseAccess" value="false"/>
    </bean>

    <bean id="stepPantherDeleteFastaFile"
          class="uk.ac.ebi.interpro.scan.management.model.implementations.DeleteFileStep" parent="abstractPantherStep">
        <property name="dependsUpon" ref="stepPantherRunBinary"/>
        <property name="stepDescription" value="Delete the FASTA file following successful run"/>
        <property name="fileNameTemplate" ref="fastaFileNameTemplate"/>
    </bean>

    <!-- STEP 3: Parse and persist raw results -->
    <bean id="stepPantherParseOutput"
          class="uk.ac.ebi.interpro.scan.management.model.implementations.panther.PantherParseStep"
          parent="abstractPantherStep">
        <property name="dependsUpon" ref="stepPantherRunBinary"/>
        <property name="stepDescription" value="Parse the output from Panther"/>
        <property name="parser">
            <bean class="uk.ac.ebi.interpro.scan.io.match.panther.PantherMatchParser">
                <!--TODO: Figure out how to handle signature library release-->
                <constructor-arg value="7.2"/>
            </bean>
        </property>
        <property name="rawMatchDAO" ref="pantherRawMatchDAO"/>
        <property name="serialGroup" value="PARSE_PANTHER"/>
        <property name="retries" value="3"/>
        <property name="signatureLibraryRelease" value="7.2"/>
        <property name="outputFileNameTemplate" ref="rawAnalaysisOutputFileTemplate"/>
    </bean>

    <bean id="stepPantherDeleteRawOutput"
          class="uk.ac.ebi.interpro.scan.management.model.implementations.DeleteFileStep"
          parent="abstractPantherStep">
        <property name="dependsUpon" ref="stepPantherParseOutput"/>
        <property name="stepDescription" value="Delete the analysis output file following successful parsing"/>
        <property name="fileNameTemplate" ref="rawAnalaysisOutputFileTemplate"/>
    </bean>

    <!-- STEP 4: Filter and persist filtered results -->
    <bean id="stepPantherPostProcessing"
          class="uk.ac.ebi.interpro.scan.management.model.implementations.panther.PantherPostProcessingStep"
          parent="abstractPantherStep">
        <property name="dependsUpon" ref="stepPantherParseOutput"/>
        <property name="stepDescription" value="Performs post processing and match persistence on Panther data"/>
        <property name="serialGroup" value="PANTHER_POST_PROCESSING"/>
        <property name="signatureLibraryRelease" value="7.2"/>
        <property name="postProcessor">
            <bean class="uk.ac.ebi.interpro.scan.business.postprocessing.panther.PantherPostProcessor">
                <constructor-arg value="1e-11"/>
            </bean>
        </property>
        <property name="rawMatchDAO" ref="pantherRawMatchDAO"/>
        <property name="filteredMatchDAO">
            <bean class="uk.ac.ebi.interpro.scan.persistence.PantherFilteredMatchDAOImpl"/>
        </property>
        <property name="retries" value="3"/>
    </bean>

    <!-- ######################## Dependencies ############################  -->
    <bean id="pantherRawMatchDAO" class="uk.ac.ebi.interpro.scan.persistence.raw.PantherRawMatchDAOImpl"/>

    <bean id="signatureLibraryReleasePanther-7.2" class="uk.ac.ebi.interpro.scan.model.SignatureLibraryRelease">
        <constructor-arg type="uk.ac.ebi.interpro.scan.model.SignatureLibrary" value="PANTHER"/>
        <constructor-arg type="java.lang.String" value="7.2"/>
    </bean>
    <!-- !!!!!!!!!!!!!!!!!!!!! Dependencies-END !!!!!!!!!!!!!!!!!!!!!!!!!!!!  -->
</beans>
